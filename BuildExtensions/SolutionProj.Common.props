<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <Import Project="$([MSBuild]::GetPathOfFileAbove(Directory.Build.props))" Condition="exists($([MSBuild]::GetPathOfFileAbove(Directory.Build.props)))" />

    <!--
    This props file is imported by a slnproj to implement standard sln proj build behavior.
    The standard slnproj behavior goes well beyond what a normal Visual Studio Solution does
    as it is designed and targeted to automated build scenarios. Rather than relying on the
    particular automated build system (Jenkins, VSO build tasks, TFS XAML build definitions
    , etc...) to do most of the work of a build. The solution proj does the bulk of a build so
    that it is more easily re-hosted, and more importantly, reproduced on a developer's machine
    for testing.

    The basic steps implemented for a slnproj are:
        EnsureBuildNumbers   - This ensures that FullBuildNumber property contains a valid
                               version number if one was not provided by the automated build
        CleanOutputFolders   - This will clean all files and folders from the common BuildOutput
                               location.
        CreateOutputFolders  - Creates the BuildOutput and sub folders that are not auto created
                               by various targets in the build
        NugetRestore         - Runs nuget restore for all NugetPackageRestore Items
        BuildContentBinaries - Runs msbuild on each of the platform+configuration combinations of
                               Multi-configuration BuildProject Items. This is done as a single
                               MSBuild Task to leverage maximum parallelization and dependency
                               analysis from MSBuild.
        SignContent          - Sings the Release configuration of the binaries generated.
        PackageContent       - Packages content into a common packaging format. (Currently only
                               NugetPackaging is supported, though this could be enhanced to
                               support other forms in the future)
        SignPackage          - Signs the package so it is ready for publication
    -->
    <PropertyGroup>
        <PrepareForBuildDepensOn>
            EnsureBuildNumbers;
            CleanOutputFolders;
            CreateOutputFolders;
            NugetRestore
        </PrepareForBuildDepensOn>

        <!-- Default list of targets to run in sequence for a build -->
        <BuildDependsOn>
            PrepareForBuild;
            BuildContentBinaries;
            SignContent;
            PackageContent;
            SignPackage
        </BuildDependsOn>
    </PropertyGroup>

    <PropertyGroup>
        <!-- Default path to Nuget.exe -->
        <NugetExePath Condition="'$(NugetExePath)'==''">$(BaseBuildOutputPath)Tools\nuget.exe</NugetExePath>
        <FullBuildNumber Condition="'$(FullBuidNumber)'=='' AND '$(APPVEYOR_BUILD_VERSION)'!=''">$(APPVEYOR_BUILD_VERSION)</FullBuildNumber>
    </PropertyGroup>

    <ItemDefinitionGroup>
        <!-- Default settings for a Multi-configuration project. These may be overridden on a per project basis -->
        <BuildProject>
            <Platforms>x64;x86</Platforms>
            <Configurations>Debug;Release</Configurations>
            <Native>false</Native>
        </BuildProject>

        <!--
        Default settings for NugetRestore. This assumes a repository with a 'src' folder
        acting as the Nuget 'SolutionDirectory'. Furthermore it assumes the location of the
        packages folder is in the $(BuildOutputPackagesDir) path.
        -->
        <NugetRestorePackage>
            <MSBuildVersion>15</MSBuildVersion>
            <PackagesDirectory>$(BuildOutputPackagesDir)</PackagesDirectory>
            <SolutionDirectory>src\</SolutionDirectory>
        </NugetRestorePackage>
        <NugetPackage>
            <NuSpecProperties>configuration=Release;buildbinoutput=$(BaseSignedOutputPath);buildcontentoutput=$(BaseOutputPath)</NuSpecProperties>
        </NugetPackage>
    </ItemDefinitionGroup>
</Project>
