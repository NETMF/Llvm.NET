<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <!--
    In-line task to parse the Full version number generated by VsoUpdateVersion.ps1.
    The full version is a string used in labeling the build for VSO, and for naming
    the final NUGET package.
    -->
    <UsingTask TaskName="ParseBuildVersion"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <FullBuildNumber ParameterType="System.String" Required="true"/>
            <BuildMajor ParameterType="System.UInt16" Output="true"/>
            <BuildMinor ParameterType="System.UInt16" Output="true"/>
            <BuildNumber ParameterType="System.UInt16" Output="true"/>
            <BuildRevision ParameterType="System.UInt16" Output="true"/>
            <BuildSuffix ParameterType="System.String" Output="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var buildParts = FullBuildNumber.Split( '.','-');
                try
                {
                    BuildMajor = UInt16.Parse( buildParts[ 0 ] );
                    BuildMinor = UInt16.Parse( buildParts[ 1 ] );
                    BuildNumber = UInt16.Parse( buildParts[ 2 ] );
                    BuildRevision = UInt16.Parse( buildParts[ 3 ] );
                    if( buildParts.Length > 4 )
                       BuildSuffix = FullBuildNumber.Substring( FullBuildNumber.IndexOf( '-' ) );
                    else
                       BuildSuffix = string.Empty;

                    Log.LogMessage( MessageImportance.High, "FullVersion: {0}.{1}.{2}.{3}{4}", BuildMajor, BuildMinor, BuildNumber, BuildRevision, BuildSuffix );
                }
                catch
                {
                    Log.LogError( "Invalid build version number format. Expected: MMMM.mmmm.nnnn.rrrr[-*]");
                }
                ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Custom task to download a file from a web URL -->
    <UsingTask TaskName="DownloadFile"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <SourceUrl ParameterType="System.String" Required="true"/>
            <DestinationPath ParameterType="System.String" Required="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Net"/>
            <Code Type="Fragment" Language="cs">
             <![CDATA[
              var client = new WebClient();
              client.DownloadFile( SourceUrl, DestinationPath );
              ]]>
            </Code>
        </Task>
    </UsingTask>

    <!-- Custom task to filter a single configuration project item list to include only the release configurations -->
    <UsingTask TaskName="FilterReleaseProjects"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <Projects ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <ReleaseProjects ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.Net"/>
            <Code Type="Fragment" Language="cs">
              <![CDATA[
              ReleaseProjects = ( from item in Projects
                                  where item.GetMetadata("Configuration") == "Release"
                                  select item
                                ).ToArray();
              ]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    Custom task to create single configuration projects from a simpler multi-configuration project list.
    MultiConfiguration projects contain a "Platforms" and "Configurations" Item Metadata that are a semicolon
    delimited list of platforms and configurations the project should build for. This task takes a list of such
    projects and creates a new one that rolls out the Platforms and Configurations for each item in the input list.
    That is the output list contains a new item for every platform+configuration combination in each item of the
    input list. The output item contains all the metadata of the original except the "Platforms" and "Configurations"
    list and additionally includes new "Platform" and "Configuration", and "AdditionalPreoperties" metadata.
    -->
    <UsingTask TaskName="CreateMultiConfigProjectList"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <Projects ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <Result ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
        </ParameterGroup>
        <Task>
            <Code Type="Class" Language="cs">
            <![CDATA[
            using Microsoft.Build.Framework;
            using Microsoft.Build.Utilities;
            using System.Linq;
            using System.Collections.Generic;
            using System;

            public class CreateMultiConfigProjectList : Microsoft.Build.Utilities.Task
            {
                [Microsoft.Build.Framework.Required]
                public Microsoft.Build.Framework.ITaskItem[] Projects { get; set; }

                [Microsoft.Build.Framework.Output]
                public Microsoft.Build.Framework.ITaskItem[] Result { get; set; }

                public override bool Execute()
                {
                    Result = ( from item in Projects
                               from platform in SplitArgs( item.GetMetadata("Platforms") )
                               from configuration in SplitArgs( item.GetMetadata("Configurations") )
                               select CreateMultiConfigItem( item, platform, configuration )
                             ).ToArray();

                    return true;
                }

                ITaskItem CreateMultiConfigItem( ITaskItem project, string platform, string configuration )
                {
                    var retVal = new TaskItem( project );
                    retVal.RemoveMetadata( "Platforms" );
                    retVal.SetMetadata( "Platform", platform );

                    retVal.RemoveMetadata( "Configurations" );
                    retVal.SetMetadata("Configuration", configuration );

                    retVal.SetMetadata("AdditionalProperties", string.Format("Platform={0};Configuration={1}", platform, configuration ) );
                    return retVal;
                }

                IEnumerable<string> SplitArgs( string inputList )
                {
                    if( string.IsNullOrWhiteSpace( inputList ) )
                        return Enumerable.Empty<string>();

                    return inputList.Split( ';' );
                }
            }
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    In-line task to set the buildNumber for use in creating an MSBuild property
    to use in generating version info source files for the build.

    For details on the general algorithm used for computing the numbers here see:
    https://msdn.microsoft.com/en-us/library/system.reflection.assemblyversionattribute.assemblyversionattribute(v=vs.140).aspx
    -->
    <UsingTask TaskName="GenerateBuildNumbers"
               TaskFactory="CodeTaskFactory"
               AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll"
               >
        <ParameterGroup>
            <BuildNumber ParameterType="System.UInt16" Output="true"/>
            <BuildRevision ParameterType="System.UInt16" Output="true"/>
        </ParameterGroup>
        <Task>
            <Using Namespace="System"/>
            <Using Namespace="System.IO"/>
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var now = DateTime.Now;
                var midnightTodayUtc = new DateTime( now.Year, now.Month, now.Day, 0, 0, 0, DateTimeKind.Utc);
                var baseDate = new DateTime(2000, 1, 1, 0, 0, 0, DateTimeKind.Utc);
                BuildNumber = (ushort)(now  - baseDate).Days;
                BuildRevision = (ushort)(((now - midnightTodayUtc).TotalSeconds) / 2);
            ]]>
            </Code>
        </Task>
    </UsingTask>

    <!--
    This task will generate a SHA256 HASH for a set of input files.
    THe hash is saved as a text file in the common ASCII HEX form with
    the same FullPath as the original Item with an added ".sha256"
    extension.
    -->
    <UsingTask TaskName="GenerateSha256File" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
        <ParameterGroup>
            <Files ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System.IO" />
            <Using Namespace="System.Security.Cryptography" />
            <Code Type="Fragment" Language="cs">
            <![CDATA[
            using( var algo = SHA256.Create() )
            {
                foreach( var item in Files )
                {
                    var fullPath = item.GetMetadata( "FullPath" );
                    using( var stream = new FileStream( fullPath, FileMode.Open ) )
                    {
                        var fileHash = algo.ComputeHash( stream );
                        var bldr = new StringBuilder();
                        foreach( byte value in fileHash )
                            bldr.AppendFormat( "{0:X02}", value );

                        var hashFileName = fullPath + ".sha256";
                        File.WriteAllText( hashFileName, bldr.ToString() );
                        Log.LogMessage( MessageImportance.High, "Generated: {0}", hashFileName );
                    }
                }
            }
            ]]>
            </Code>
        </Task>
    </UsingTask>
</Project>