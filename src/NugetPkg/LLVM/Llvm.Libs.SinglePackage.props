<Project>
    <PropertyGroup>
        <!--
        NOTE: VS doesn't like it when conditions and other expressions appear in the UserMacros labeled PropertyGroup.
              Therefore, these are all done in an unlabeled group that precedes the UserMacros group visible in the IDE
        -->
        <LlvmVersionMajor Condition="'$(LlvmVersionMajor)'==''">4</LlvmVersionMajor>
        <llvmVersionMinor Condition="'$(llvmVersionMinor)'==''">0</llvmVersionMinor>
        <LlvmVersionBuild Condition="'$(LlvmVersionBuild)'==''">1</LlvmVersionBuild>
        <LlvmLibsNugetPkgRoot>$([MSBuild]::NormalizeDirectory('$(MSBuildThisFileDirectory)..\..'))</LlvmLibsNugetPkgRoot>

        <!--
        Classic VS installations don't have an "x86" platform - the official name of the platform is Win32,
        However, the default VS 2017 CMake support uses x86 as a platform name. So this adapts and adjusts
        to allow for compatibility across VS tool versions.
        -->
        <LLVM_PLATFORM>$(Platform)</LLVM_PLATFORM>
        <LLVM_PLATFORM Condition="'$(LLVM_PLATFORM)'=='Win32'">x86</LLVM_PLATFORM>
        <LLVM_PLATFORM_CONFIG>$(LLVM_PLATFORM)-$(Configuration)</LLVM_PLATFORM_CONFIG>
    </PropertyGroup>
    <PropertyGroup Label="UserMacros">
        <LLVM_VERSION>$(LlvmVersionMajor).$(llvmVersionMinor).$(LlvmVersionBuild)</LLVM_VERSION>
        <LLVM_SRCROOT_DIR>$(LlvmLibsNugetPkgRoot)lib\native\</LLVM_SRCROOT_DIR>

        <!-- Standard LLVM common Include path-->
        <LLVM_INCLUDE>$(LLVM_SRCROOT_DIR)Include\</LLVM_INCLUDE>
        <LLVM_CONFIG_DIR>$(LlvmLibsNugetPkgRoot)lib\native\$(LLVM_PLATFORM_CONFIG)\</LLVM_CONFIG_DIR>
        <LLVM_CONFIG_INCLUDE>$(LLVM_CONFIG_DIR)Include\</LLVM_CONFIG_INCLUDE>
        <LLVM_LIB_DIR>$(LLVM_CONFIG_DIR)lib\</LLVM_LIB_DIR>
    </PropertyGroup>
    <ItemGroup>
        <AllLlvmLibs Include="$(LLVM_LIB_DIR)*.lib" />
    </ItemGroup>
    <ItemDefinitionGroup>
        <ClCompile>
            <AdditionalOptions>%(AdditionalOptions) /Zc:sizedDealloc-</AdditionalOptions>
            <AdditionalIncludeDirectories>$(LLVM_CONFIG_INCLUDE);$(LLVM_INCLUDE);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
            <DisableSpecificWarnings>4141;4146;4267;4244;4800;4291;4996;4624;%(DisableSpecificWarnings)</DisableSpecificWarnings>
        </ClCompile>
        <Link>
            <AdditionalDependencies>$(LLvmLibs);%(AdditionalDependencies)</AdditionalDependencies>
            <AdditionalLibraryDirectories>$(LLVM_LIB_DIR);%(AdditionalLibraryDirectories)</AdditionalLibraryDirectories>
        </Link>
    </ItemDefinitionGroup>
    <Target Name="__MkLibProp" BeforeTargets="Link">
        <!--
        The AllLlvmLibs ItemGroup will contain the Full path on each library.
        Unfortunately, that makes the final linker command REALLy long. For
        cases when the packages are installed into a deep path, with build
        using a linker response file, the line ends up too long. So, this
        strips the path to leave only the file name. The path is added to the
        linker as an entry in the AdditionalLibraryDirectories property
        -->
        <PropertyGroup>
            <LLvmLibs>@(AllLlvmLibs->'%(filename)%(extension)')</LLvmLibs>
        </PropertyGroup>
    </Target>
</Project>
